# -*- coding: utf-8 -*-
"""Copy of Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f8drh3U4BV4Rtcrf1tv0eh2L-Hk32A0f
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline
import sys

air= pd.read_csv('sample_data/Airqualityitaly.csv')
air.head(10)

sns.heatmap(air.isnull(),yticklabels=False,cbar=False,cmap='viridis')

sns.heatmap(air.corr(),annot=True,cmap='viridis')
plt.title('Heatmap of co-relation between variables',fontsize=20)
plt.show()

air.describe()

air.info()

air=air.dropna()
air

air.info()

air.isnull().sum()

air.isna().sum()

air.columns

(air['Date']==-200).sum()

(air['Time']==-200).sum()

air['Hour']=air['Time'].apply(lambda x: int(x.split('.')[0]))
air.Hour.head()

air['Date']=pd.to_datetime(air.Date, format='%d/%m/%Y')

air.set_index('Date',inplace=True)

air.index

air.index.values

air['Month']=air.index.month   
air.reset_index(inplace=True)

air.iloc[4887,-1]

(air['CO(GT)']==-200).sum()

(air['PT08.S1(CO)']==-200).sum()

(air['NMHC(GT)']==-200).sum()

(air['C6H6(GT)']==-200).sum()

(air['PT08.S2(NMHC)']==-200).sum()

(air['NOx(GT)']==-200).sum()

(air['PT08.S3(NOx)']==-200).sum()

(air['NO2(GT)']==-200).sum()

(air['PT08.S4(NO2)']==-200).sum()

(air['PT08.S5(O3)']==-200).sum()

(air['T']==-200).sum()

(air['RH']==-200).sum()

(air['AH']==-200).sum()

air['CO(GT)']=air['CO(GT)'].transform(lambda x: x.replace([-200.0],[np.nan]))

air['CO(GT)'].median()

air['CO(GT)'].isna().sum()

air['CO(GT)']=air['CO(GT)'].fillna(1.8)
air['CO(GT)'].isna().sum()

air['PT08.S1(CO)']=air['PT08.S1(CO)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['PT08.S1(CO)'].median()

air['PT08.S1(CO)'].isna().sum()

air['PT08.S1(CO)']=air['PT08.S1(CO)'].fillna(1063.0)
air['PT08.S1(CO)'].isna().sum()

air['NMHC(GT)']=air['NMHC(GT)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['NMHC(GT)'].median()

air['NMHC(GT)'].isna().sum()
air['NMHC(GT)']=air['NMHC(GT)'].fillna(150.0)

air['NMHC(GT)'].isna().sum()

air['C6H6(GT)']=air['C6H6(GT)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['C6H6(GT)'].median()

air['C6H6(GT)'].isna().sum()

air['C6H6(GT)']=air['C6H6(GT)'].fillna(8.2)

air['C6H6(GT)'].isna().sum()

air['PT08.S2(NMHC)']=air['PT08.S2(NMHC)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air.shape

air['PT08.S2(NMHC)'].median()

air['PT08.S2(NMHC)'].isna().sum()

air['PT08.S2(NMHC)']=air['PT08.S2(NMHC)'].fillna(air['PT08.S2(NMHC)'].median())

air['PT08.S2(NMHC)'].isna().sum()

air['NOx(GT)']=air['NOx(GT)'].transform(lambda x: x.replace([-200.0],[np.nan]))

air['NOx(GT)'].median()

air['NOx(GT)'].isna().sum()

air['NOx(GT)']=air['NOx(GT)'].fillna(air['NOx(GT)'].median())

air['NOx(GT)'].isna().sum()

air['PT08.S3(NOx)']=air['PT08.S3(NOx)'].transform(lambda x: x.replace([-200.0],[np.nan]))

air['PT08.S3(NOx)'].median()

air['PT08.S3(NOx)'].isna().sum()

air['PT08.S3(NOx)']=air['PT08.S3(NOx)'].fillna(air['PT08.S3(NOx)'].median())
air['PT08.S3(NOx)'].isna().sum()

air['NO2(GT)']=air['NO2(GT)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['NO2(GT)'].median()

air['NO2(GT)'].isna().sum()

air['NO2(GT)']=air['NO2(GT)'].fillna(air['NO2(GT)'].median())
air['NO2(GT)'].isna().sum()

air['PT08.S4(NO2)']=air['PT08.S4(NO2)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['PT08.S4(NO2)'].median()

air['PT08.S4(NO2)'].isna().sum()

air['PT08.S4(NO2)']=air['PT08.S4(NO2)'].fillna(air['PT08.S4(NO2)'].median())

air['PT08.S4(NO2)'].isna().sum()

air['PT08.S5(O3)']=air['PT08.S5(O3)'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['PT08.S5(O3)'].median()

air['PT08.S5(O3)'].isna().sum()

air['PT08.S5(O3)']=air['PT08.S5(O3)'].fillna(air['PT08.S5(O3)'].median())
air['PT08.S5(O3)'].isna().sum()

air['T']=air['T'].transform(lambda x: x.replace([-200.0],[np.nan]))

air['T'].median()

air['T'].isna().sum()

air['T']=air['T'].fillna(air['T'].median())
air['T'].isna().sum()

air['RH']=air['RH'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['RH'].median()

air['RH'].isna().sum()

air['RH']=air['RH'].fillna(air['RH'].median())
air['RH'].isna().sum()

air['AH']=air['AH'].transform(lambda x: x.replace([-200.0],[np.nan]))
air['AH'].median()

air['AH'].isna().sum()

air['AH']=air['AH'].fillna(air['AH'].median())
air['AH'].isna().sum()

air.median()

air.std()

cols=air.columns.tolist()[2:]
cols

X=air[cols].drop('RH',axis=1) 
y=air['RH']

X

y

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
sns.distplot(y)

np.log(y)

sns.distplot(np.log(y))

#Random Forest Regression
from sklearn.model_selection import train_test_split

X1_train, X1_test, y1_train, y1_test=train_test_split(X,y,test_size=0.3, random_state=0)

print('Training data size:',X1_train.shape)
print('Test data size:',X1_test.shape)

from sklearn.ensemble import RandomForestRegressor

RF=RandomForestRegressor(n_estimators=100)

RF.fit(X1_train,y1_train)

RF.score(X,y)

RF.score(X1_test,y1_test)

RF.score(X1_train,y1_train)

from sklearn.model_selection import cross_val_score,KFold
kfold=KFold(n_splits=10)
score=cross_val_score(RF,X,y,cv=kfold)

score

score.mean()

pred = RF.predict(X1_test)

pred

plt.scatter(y1_test,pred)

from sklearn.metrics import mean_squared_error
from math import sqrt

print('MSE:', metrics.mean_squared_error(y1_test, pred))
print('MAE:',metrics.mean_absolute_error(y1_test, pred))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y1_test, pred)))

error=np.exp(rms)
error

import statsmodels.api as sm

X.head(8)

X_opt = X.values
X_opt

regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
regressor_OLS.summary()

X_opt = X_opt[:,[0,1,2,4,5,6,7,8,9,10,11,12,13]]
regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
regressor_OLS.summary()

from sklearn.model_selection import learning_curve

train_sizes, train_errors, validation_errors = learning_curve(estimator = RF, X = X1_train, y = y1_train, cv=5, scoring = 'neg_mean_squared_error', train_sizes=np.linspace(0.1, 1.0, 5))

train_error_mean = -np.mean(train_errors,axis=1)

validation_error_mean = -np.mean(validation_errors,axis=1)

print('Mean training error\n\n',pd.Series(train_error_mean, index = train_sizes))
print('\n')
print('\nMean validation error\n\n',pd.Series(validation_error_mean, index = train_sizes))

fig = plt.figure(figsize=(10,7))

plt.style.use('seaborn')

plt.plot(train_sizes, train_error_mean, label='Training error')
plt.plot(train_sizes, validation_error_mean, label='Validation error')

plt.ylabel('Mean Squared Error', fontsize = 14)
plt.xlabel('Training set size', fontsize = 14)
plt.title('Learning curves for a Random Forest Regression model',fontsize = 18, y=1.03)
plt.legend()
plt.show()

pred=pd.DataFrame(RF.predict(X1_test))
pred.columns=['predicted']
actual=pd.DataFrame(y1_test.reset_index()['RH'])
actual.columns=['actual']

RF_pred=pd.concat([actual,pred],axis=1)

RF_pred.head(50)

#decision tree regression

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor()
regressor.fit(X1_train,y1_train)

from sklearn.model_selection import cross_val_score
score=cross_val_score(regressor,X,y,cv=5)

score.mean()

prediction=regressor.predict(X1_test)

plt.scatter(y1_test,prediction)

from sklearn import metrics
print('MSE:', metrics.mean_squared_error(y1_test, prediction))
print('MAE:',metrics.mean_absolute_error(y1_test, prediction))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y1_test, prediction)))

X_opt = X_opt[:,[0,1,2,4,5,6,7,8,9,10,11]]
regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
regressor_OLS.summary()

#support vector regression
from sklearn.svm import SVR
regressor = SVR(kernel='rbf')
regressor.fit(X1_train,y1_train)

from sklearn.model_selection import cross_val_score
score=cross_val_score(regressor,X,y,cv=5)

score.mean()

prediction=regressor.predict(X1_test)

plt.scatter(y1_test,prediction)

from sklearn import metrics
print('MSE:', metrics.mean_squared_error(y1_test, prediction))

X_opt = X_opt[:,[0,1,2,4,5,6,7,8,9,10]]
regressor_OLS = sm.OLS(endog=y, exog=X_opt).fit()
regressor_OLS.summary()

from sklearn.linear_model import LinearRegression
lm = LinearRegression()
lm.fit(X1_train, y1_train)

print(lm.intercept_)

pred

coeff_data = pd.DataFrame(lm.coef_, index=X.columns, columns=['Coefficient'])
coeff_data

prediction = lm.predict(X1_test)

linear_regression_score = lm.score(X1_test, y1_test)
linear_regression_score

sns.distplot((y1_test-prediction), bins=70, color="red")

print('MAE:',metrics.mean_absolute_error(y1_test, prediction))
print('MSE:',metrics.mean_squared_error(y1_test, prediction))
print('RMSE:',np.sqrt(metrics.mean_squared_error(y1_test, prediction)))